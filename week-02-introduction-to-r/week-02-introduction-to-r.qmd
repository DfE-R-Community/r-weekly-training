<!-- Please edit README.Rmd - not README.md -->

# Week 02: Introduction to R

Welcome to the DfE R Community's weekly R training! This programme
should get you up-to-speed with the basics of R, ready to use it
effectively in your day-to-day work and continue to independently
develop your R skills moving forward.

# Prerequisites

-   **R and RStudio**: If you don't have these installed already, you
    can find out how to get them set up by referring to week 00.
-   **Git and GitHub**: You'll need to know how to use these to submit
    solutions. Read exercises 3-10 of [Chapter
    1](../week-01-version-control) for a recap of how to do this.
-   **Reading**: Read through chapters 1 - 5 of [R for Data
    Science](https://r4ds.had.co.nz/introduction.html) and try the
    examples as you go along - this will require you to install some
    packages too. (Note: It's worth bookmarking R4DS as it will be one
    of the main resources we use in this training :))

# Exercises

1.  Create a new R script and name it after your AD username (the same
    one you use to log in on your laptop)

2.  Load the packages `dplyr`, `tidyr` and `ggplot2` at the top of your
    script

3.  Run `mtcars` in the console and look at the output. You'll see the
    first column doesn't have a header - this is because it gives *row
    names* for the dataset. Create a new version of the dataset,
    `mtcars2`, which gives the car names in a new column named `car`.
    This should be a `tibble`.

    ```{r}
    # The mtcars dataset:
    head(mtcars, 10)
    ```

4.  

    a)  Add a new column which gives `TRUE`/`FALSE` depending on whether
        a car does more then 20 miles/gallon
    b)  Use `group_by()` and `summarise()` to create a new dataset
        giving the average miles/gallon for each combination of `cyl`
        and `gear`
    c)  `summarise()` is a function from `dplyr` which can be used to
        combine rows in a dataset. Run `?summarise` in the console to
        view the function's documentation, and read through to discover
        what the `.groups` argument does. Using this information, review
        your answer to part b) and ensure the output is not 'grouped'.
    d)  Bonus: Do the same, but include each *make* of car in the
        output. (Hint: look at the examples in the documentation for
        `tidyr`'s `separate()` function).

5.  

    a)  Create a scatter-plot of miles/gallon against weight (R4DS
        chapter 3, section 3 may be helpful here)
    b)  Colour the points to indicate the number of cylinders
    c)  Give the points a different shape if the car does more than 20
        miles/gallon
    d)  Give your plot a descriptive title and optional subtitle
        describing a key finding
    e)  Bonus: Fit a smooth line between the different points. (Hint:
        type `geom_` in the console and see what the autocomplete
        options are).

6.  Make sure your script is nicely commented. You might also want to
    try dividing it into [different
    sections](https://support.rstudio.com/hc/en-us/articles/200484568-Code-Folding-and-Sections-in-the-RStudio-IDE)

7.  Submit your solutions by making a pull request on GitHub. If someone has 
    agreed to review your solutions, add them as a required reviewer and GitHub
    will send them an email asking them to check your code.

Good luck!
